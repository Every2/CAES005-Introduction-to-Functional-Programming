Ao longo do texto Bjarne Stroustoup nos conta aspectos da linguagem C++ como por exemplo que C++ não é apenas sua especificação, mas sim suas ferramentas e também que o primariamente é em ser uma linguagem industrial. No entanto, a linguagem se guia em três principios dito por ele como contraditórios sendo eles:
- Fazer a linguagem simples, mas com que fazer o complexo não seja necessariamente difícil e coisas complexas não sejam impossíveis.
- Adicionar features essenciais o mais rapido possível.
- Não quebrar nenhum código.
Apesar disso ao longo de seu artigo vemos que apesar disso, tudo dito até agora não se concretiza por vários motivos e assim como ele mesmo diz, a linguagem é contraditória como um todo. Bjarne inicialmente demonstra como C++ moderno tem dificuldade de chegar ao menos em sua versão de 2011 porque quando a linguagem foi adotada existiam poucas bibliotecas e em sua maioria privada o que foi viral para conjuntos da linguagem dividirem o ecossistema de C++ e que as frequentes quebras de ABI após essa versão faz a adoção ser lenta. Algo a se destacar é que ele como criador da linguagem nunca disse que C++ é orientada a objetos ou até mesmo que "tudo é um objeto", C++ apenas dá suporte em orientação a objetos e ao longo do artigo também vemos como C++ foi influenciada desde Lisp e Haskell até Python e Javascript, e também como influênciou em C, C#, Java e Rust. Também é possível notar que o processo de "adicionar features o mais rapido possível" é bem contraditório já que pessoas do comitê não conseguem se entender sobre isso e acabam sendo atrasadas por conta disso, por exemplo: Corotinas estarem em desenvolvimento desde de o padrão de 98. Todavia, ele se mostra bastante consciente que o processo não é perfeito e cheio de problemas, mas não parece ter encontrado um balanço entre o que as pessoas pensam da linguagem e o que de fato o comitê pensa. 
